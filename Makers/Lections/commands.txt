			|		Команды в Linux terminal		|
____________________________________________________________________________________________________________
pwd - команда чтобы узнать путь к текущей папке
cd - команда для навигации к директориям (cd, cd..,cd-)
ls - команда для просмотра содержимое каталог (ls -a, ls -R, ls -al)
cat - команда для вывода содержимое файла ( cat> filename создаёт новый файл, cat filename1 filename2>filename3 объединяет два файла (1 и 2) и сохранит их содержимое в новом файле filename3 )
cp - команда для копирования файлов из текущего каталога в другую
mv - основное предназначение команды mv — перемещение файлов, хотя её также можно использовать для их переименования
mkdir - команда чтобы создать новый каталог (папку)
rmdir - команда для удаление каталога (папку)
rm - используется для удаление каталогов и содержимое внутри каталога вместе
touch - команда для создание файла
locate - команда для поиска файла (работает как поисковая система windows)
find - Подобно команде locate, find также выполняет поиск файлов и каталогов. Разница в том, что команда find используется для поиска файлов в текущем каталоге (Для поиска файлов в текущем каталоге используйте find . -name notes.txt, Для поиска каталогов используйте find / -type d -name notes. txt)

_______________________________________________________________________________________________________________
			|		Команды GIT		|
_______________________________________________________________________________________________________________
1) git init - создает новую директорию (инициализация)
2) git add .  - для сохранения текущего состояния проекта
3) git commit -m 'comment' - для комментирования (обьязательна)
4) git remote add origin (ssh url) - команда для создания записи о новом подклчении к удаленому репазиторию
5) git branch -M (main) - это своего рода "менеджер веток". Она умеет перечислять ваши ветки, создавать новые, удалять и переименовывать их. Большая часть главы Ветвление в Git посвящена этой команде, она используется повсеместно в этой главе.
6) git push -u origin main - команда для загрузки содержимое в локальной репозитории на удалёный
_______________________________________________________________________________________________________________
			|		 Встроенные функции и методы строк		|
_______________________________________________________________________________________________________________
find(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер первого вхождения или -1
rfind(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер последнего вхождения или -1
index(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер первого вхождения или вызывает ValueError
rindex(str, [start],[end]) - Поиск подстроки в строке. Возвращает номер последнего вхождения или вызывает ValueError
replace(шаблон, замена) - Замена шаблона
split(символ) - Разбиение строки по разделителю
upper() - Преобразование строки к верхнему регистру
lower() - Преобразование строки к нижнему регистру swapcase() - Переводит символы нижнего регистра в верхний, а верхнего – в нижний
startswith(str) - Начинается ли строка с шаблона str
title() - Первую букву каждого слова переводит в верхний регистр, а все остальные в нижний
capitalize() - Переводит первый символ строки в верхний регистр, а все остальные в нижний
isdigit() - Состоит ли строка из цифр
endswith(str) - Заканчивается ли строка S шаблоном str
isalpha() - Состоит ли строка из букв
isalnum() - Состоит ли строка из цифр или букв
islower() - Состоит ли строка из символов в нижнем регистре
isupper() - Состоит ли строка из символов в верхнем регистре
isspace() - Состоит ли строка из неотображаемых символов (пробелов, табуляции)
istitle() - Начинаются ли слова в строке с заглавной буквы

________________________________________________________________________________________________________________
			|			Основные встроенные функции Python			|
________________________________________________________________________________________________________________
print() - Выводит в терминал код
input() - Принимает ввод данных от пользователя
str(),int(),bool(),tuple(),set(),list(),dict()... - 	функции переборазования типов данных
len() - показывает количество символов в типах данных
min() - показывает минимальную величину (int)
max() - показывает максимальную величину (int)
sum() - суммирует (int)
abs() -
chr() -
callable() -
eval() -
filter() -
hash() -
iter() -
map() -
next() -
ord() -
reduce() -
sorted() -
enumerate() - 
zip() - 
reversed() - 
any() - 
all() -
dir() -
breakpoint() - 
vars() -
type() -
help() -
open() -
repr() -
super() -
property() -
issubclass() -
isinstance() -
range(end): создается набор чисел от 0 до числа end
range(start, end): создается набор чисел от числа start до числа end
range(start, end, step): создается набор чисел от числа start до числа end с шагом step
lambda variable(-s): действие и условия
________________________________________________________________________________________________________________
			|		Встроенные функции и методы списков				|			
________________________________________________________________________________________________________________
insert(index, item): добавляет элемент item в список по индексу index
append(item): добавляет элемент item в конец списка
remove(item): удаляет элемент item. Удаляется только первое вхождение элемента. Если элемент не найден, генерирует исключение ValueError
clear(): удаление всех элементов из списка
index(item): возвращает индекс элемента item. Если элемент не найден, генерирует исключение ValueError * pop([index]): удаляет и возвращает элемент по индексу index. Если индекс не передан, то просто удаляет последний элемент.
count(item): возвращает количество вхождений элемента item в список
sort([key]): сортирует элементы. По умолчанию сортирует по возрастанию. Но с помощью параметра key мы можем передать функцию сортировки.
reverse(): расставляет все элементы в списке в обратном порядке
Кроме того, Python предоставляет ряд встроенных функций для работы со списками:
len(list): возвращает длину списка
sorted(list, [key]): возвращает отсортированный список
min(list): возвращает наименьший элемент списка
max(list): возвращает наибольший элемент списка
_________________________________________________________________________________________________________________
			|		Встроенные функции и методы словари			|
_________________________________________________________________________________________________________________
Метод pop() удаляет из словаря элемент по указанному ключу и возвращает значение удаленной пары. Метод popitem() не принимает аргументов, удаляет и возвращает произвольный элемент
С помощью setdefault() можно добавить элемент в словарь

example_dictionary.copy() - возвращает копию словаря example_dictionary
example_dictionary.clear() - очищает словарь example_dictionary
dict.fromkeys(seq[, value]) - создает словарь с ключами из seq (seq -- это последовательность в виде кортежа, списка, строчного значения, или множества) и значением value (по умолчанию None)
example_dictionary.get(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а возвращает default (по умолчанию None)
example_dictionary.items() - возвращает пары (ключ, значение)
example_dictionary.keys() - возвращает ключи в словаре
example_dictionary.pop(key[, default]) - удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение)
dict.popitem() - удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядочены
dict.setdefault(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а создает ключ с значением default (по умолчанию None)
dict.update([other]) - обновляет словарь, добавляя пары (ключ, значение) из other. Существующие ключи перезаписываются. Возвращает None (не новый словарь!)
dict.values() - возвращает значения в словаре
Метод clear() - удаляет все элементы словаря, но не удаляет сам словарь. В итоге остается пустой словарь
